name: Daily Frontend Contributions

on:
  schedule:
    - cron: '0 6,10,14,18,22 * * *'  # 5 ejecuciones diarias en diferentes horarios
  workflow_dispatch:

permissions:
  contents: read   # Permiso de lectura crÃ­tico aÃ±adido
  contents: write
  pull-requests: write
  issues: write

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Install GitHub CLI
        run: |
          sudo apt update
          sudo apt install -y curl
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install -y gh
          gh auth login --with-token <<< "${{ secrets.AUTO_CONTRIB_TOKEN }}"
        env:
          GH_TOKEN: ${{ secrets.AUTO_CONTRIB_TOKEN }}  # Variable crÃ­tica aÃ±adida

  contribute:
    runs-on: ubuntu-latest
    needs: setup
    env:
      GH_TOKEN: ${{ secrets.AUTO_CONTRIB_TOKEN }}  # Variable para todos los pasos
    steps:
      - name: Get random repo
        id: random-repo
        run: |
          # Lista de repositorios
          REPOS=(
            "facebook/react"
            "tailwindlabs/tailwindcss"
            "vercel/next.js"
            "vuejs/core"
            "sveltejs/svelte"
            "chakra-ui/chakra-ui"
            "storybookjs/storybook"
            "axios/axios"
            "lodash/lodash"
            "chartjs/Chart.js"
            "adobe/react-spectrum"
            "mui/material-ui"
            "reduxjs/redux-toolkit"
            "react-hook-form/react-hook-form"
            "framer/motion"
            "threejs/three.js"
          )
          # Seleccionar un repo aleatorio
          SELECTED_REPO=${REPOS[$RANDOM % ${#REPOS[@]}]}
          echo "selected_repo=$SELECTED_REPO" >> $GITHUB_OUTPUT

      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.random-repo.outputs.selected_repo }}
          path: target-repo
          token: ${{ secrets.AUTO_CONTRIB_TOKEN }}
          persist-credentials: true
          ref: main            # Especificar rama
          fetch-depth: 0        # Descargar todo el historial
          sparse-checkout: |     # Descargar solo lo necesario
            README.md
            examples/

      - name: Make human-like contribution
        run: |
          cd target-repo
          sleep $((60 + RANDOM % 240))  # Espera aleatoria
          
          # 1. Corregir errores en documentaciÃ³n
          if [ -f README.md ]; then
            sed -i 's/hte/the/g' README.md
            sed -i 's/Javscript/JavaScript/g' README.md
          fi
          
          # 2. AÃ±adir ejemplo prÃ¡ctico
          if [ ! -f examples/franco-usage.js ]; then
            mkdir -p examples
            echo "// Ejemplo por @FrancoKaddour" > examples/franco-usage.js
            echo "export default () => console.log('Hello from Franco!');" >> examples/franco-usage.js
          fi

      - name: Create PR
        run: |
          cd target-repo
          git config user.name "Franco Kaddour"
          git config user.email "francokaddour@gmail.com"
          
          BRANCH_NAME="franco-improvements-$(date +'%m%d')"
          git checkout -b $BRANCH_NAME
          git add .
          git commit -m "ðŸ“š Mejoras de documentaciÃ³n y ejemplos"
          git push origin $BRANCH_NAME
          
          sleep $((120 + RANDOM % 360))  # Espera aleatoria
          
          gh pr create \
            --title "Mejoras de documentaciÃ³n (por @FrancoKaddour)" \
            --body "Hola equipo! He mejorado la documentaciÃ³n y aÃ±adÃ­ un ejemplo prÃ¡ctico basado en mi experiencia" \
            --base main \
            --head $BRANCH_NAME \
            --repo ${{ steps.random-repo.outputs.selected_repo }}

      - name: Engage with community
        run: |
          sleep $((300 + RANDOM % 600))
          # Obtener un issue aleatorio (el primero de la lista)
          ISSUE_NUMBER=$(gh issue list --repo ${{ steps.random-repo.outputs.selected_repo }} --limit 1 --json number -q '.[0].number')
          if [ -n "$ISSUE_NUMBER" ]; then
            gh issue comment $ISSUE_NUMBER --repo ${{ steps.random-repo.outputs.selected_repo }} \
              --body "Interesante problema! Desde mi experiencia con frontend, sugerirÃ­a probar este enfoque..."
          fi

      - name: Verify access (DiagnÃ³stico)
        run: |
          echo "Token usado: ${{ secrets.AUTO_CONTRIB_TOKEN }}"
          gh auth status
          gh api /repos/${{ steps.random-repo.outputs.selected_repo }} --jq .permissions

  update-profile:
    runs-on: ubuntu-latest
    needs: contribute
    env:
      GH_TOKEN: ${{ secrets.AUTO_CONTRIB_TOKEN }}  # Variable para todos los pasos
    steps:
      - name: Update profile README
        uses: actions/checkout@v4
        with:
          repository: FrancoKaddour/FrancoKaddour
          path: profile
          token: ${{ secrets.AUTO_CONTRIB_TOKEN }}
          
      - name: Add contributions section
        run: |
          cd profile
          echo "\n## ðŸš€ Ãšltimas Contribuciones" > new-section.md
          echo "### $(date '+%d/%m/%Y')" >> new-section.md
          gh pr list --author FrancoKaddour --limit 5 --json repository,url,title | \
          jq -r '.[] | "- [\(.repository.name)]\(.url) - \(.title)"' >> new-section.md
          
          # Insertar en README entre los marcadores
          awk '/<!-- CONTRIB_START -->/{print; print ""; while(getline <"new-section.md") print; f=1} /<!-- CONTRIB_END -->/{f=0} !f' README.md > tmp.md
          mv tmp.md README.md
          rm new-section.md

      - name: Commit changes
        run: |
          cd profile
          git config user.name "Franco Kaddour"
          git config user.email "francokaddour@gmail.com"
          git add README.md
          git commit -m "âœ¨ Actualizar contribuciones"
          git push
